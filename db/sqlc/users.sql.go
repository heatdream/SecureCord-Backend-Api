// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users" (
    username,
    password,
    email
) VALUES (
    $1, $2, $3
) RETURNING username, password, email, uuid
`

type CreateUserParams struct {
	Username string         `json:"username"`
	Password string         `json:"password"`
	Email    sql.NullString `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Uuid,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT username, password, email, uuid FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Uuid,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT username, password, email, uuid FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Uuid,
	)
	return i, err
}
